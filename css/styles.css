:root{  /*esto se utiliza para guardar cosas customizadas(?)*/
    --blanco:#ffffff; /*color en exadecimal*/
    --negro:#000000;
    --primario: rgb(255,193,7); /*color en rgb*/
    --secundario:#0097a7;
    --gris: #757575;
    --gris-claro: #DFE9F3;
/*la definición de estas cosas en el root ayudan a la reutiliacion de codigo,
 en root defino valores personalizados, con un nombre.
 lo que está bueno es que esto me ayuda a reducir enormemente correciónes manuales por cambios de estilo*/
}
h1{
    font-size: 3.8rem;
}
h2{
    font-size: 2.8rem;
}
h3{
    font-size: 1.8rem;
}
h1,h2,h3{
    text-align: center;
}

html{
    font-size:62.5%;
    scroll-snap-type: y mandatory;
}

body{
    font-size: 16px;
    background-image: linear-gradient(to top, VAR(--gris-claro) 0%, var(--blanco) 100%);

}
html {
    box-sizing: border-box;
    
  }
  *, *:before, *:after {
    box-sizing: inherit;
  }
.titulo{ /*estoy especificando objetos de la clase titulo, en este caso, el h1*/
    
    font-family: 'Krub', sans-serif; /*aqui, seleccion de la fuente externa*/
    color: var(--negro); /*aquí coloco como valor una variable que inicializo con 
    un valor personalizado en :root*/
    font-weight: 700;

}
.sombra{
    -webkit-box-shadow: 0px 5px 15px 0px rgba(112,112,112,1);
-moz-box-shadow: 0px 5px 15px 0px rgba(112,112,112,1);
box-shadow: 0px 5px 15px 0px rgba(112,112,112,1);
}
/** UTILIDADES **/
.nav-bg {
    background-color: var(--secundario);
    max-width: 140rem;
    margin: 0 auto;

    
}



.contenedor{
    max-width: 120rem;
    margin: 4rem auto;
    padding: 2rem;
    
    
    
    /*tambien puede ser utilizando la clave margin: 0 (up) auto(left)  o tambien margin: 0(bottom) auto(right) */
 } 

.navegacion-principal{
    
    display: flex;
    flex-direction: column;
    align-items: center;
    
}
.navegacion-principal a{
    padding: 1rem;
    text-decoration: none;
    color: var(--blanco);
    font-weight: 700;
    

}
@media (min-width : 768px) { /*media query para cambio de resolucion*/
    .navegacion-principal {/*hago el elemento con propiedad a reescribir y modifico lo que neceseite*/
        flex-direction: row;/* display flex ya lo tiene, lo que hago directamente es modificar el estado de
         una propiedad según sea necesario*/
         justify-content: space-between;

    }

}
.navegacion-principal a:hover{

    
    background-color: var(--primario);
    color: var(--negro)

}
.hero{
    background-image: url(../Img/hero.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 450px;
    
    position: relative; /*al elemento padre, si hay que trabajar con direcciones se 
    le asigna siempre posicion relativa, en cambio al hijo (en este caso
    contenido-hero), se le asigna posicion absoluta*/
}
.contenido-hero{
    position: absolute;
    background-color: rgba(0, 0,  0, .7);
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

}
.contenido-hero h2,
.contenido-hero p{
    color: var(--blanco);
}
.ubicacion{
    display: flex;
    align-items: flex-end;
}
.boton{
    background-color: var(--secundario);
    color: var(--blanco);
    padding: 1rem 3rem;
    margin-top: 5rem;
    font-size: 2rem;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: 700;
    border-radius: .5rem;
    width: 90%;
    text-align: center;
    border: none;

}   

.flex{
    display: flex;
}

.alinear-derecho{
    justify-content: flex-end;

}

.w-100{
    width: 100%; /* esta clase serviria para adjudicar width 100% a lo que la hereda */
}

@media (min-width : 768px) {
    .w-100{
        width: auto;
    }
}



.boton:hover{
    cursor: pointer;
}

    


@media (min-width : 768px) {
    .servicios{
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        /* grid-template-rows: 300px 300px; sirve para determinar ancho de celdas */
        /* grid-template-columns: repeat(3,1fr); es otra forma 
        de escribir la linea anterior */
        /* grid-template-rows: 33.3% 33.3% 33.3%; tambien es otra forma de escribir lo anterior */
        column-gap: 1rem; /* sirve para definir la separacion del contenido de una celda al borde del grid */
    }
}
.servicio{
display: flex;
flex-direction: column;
align-items: center;
}
.servicio .icono{
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}
.servicio p{
    line-height: 2;
}
.servicio h3{
    color: var(--secundario);
    font-weight: normal;
}



.formulario{
    background-color: var(--gris);
    width: min(60rem,100%);/*utilizar el 
    valor más pequeño: si el 100% del ancho de la pantalla es menor que 
    600px, va a utilizar el ancho de pantalla, de lo contrario utiliza 60rem*/
    margin: 0 auto;
    padding: 2rem;
    border-radius: 15px;

}
.formulario fieldset{
    border: none;
    
}
.formulario legend{
    text-align: center;
    font-size: 1.8rem;
    text-transform: uppercase;
    color: var(--primario);
    font-weight: 700;
    margin-bottom: 2rem;

}

.campo label{
    color: var(--blanco);
    font-weight: bold;
    margin-bottom: .5rem;
    display: block;
}

.input-text{
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: .5rem;
}

@media (min-width : 768px) {
    .w100{
        width: auto;
    }
    
}
.campo textarea{
    height: 20rem;
    margin-bottom: 10rem;
}
@media (min-width : 768px) {

    .contenedor-campos{
        display: grid;
        grid-template-columns: repeat(2,1fr);
        grid-template-rows: auto auto 20rem;
        column-gap: 1rem;
    
    }
    
}
.campo:nth-child(3), .campo:nth-child(4){
    grid-column: 1/3;


}

.footer{
    text-align: center;
}